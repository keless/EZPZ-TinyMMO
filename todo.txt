
WIP:
* SERVER: retroactively apply user inputs on server (fix snapping when changing direction)

BUGS:
- player controlled entity isnt always rendered on top of other character entities
- turning is glitchy (snaps probably because locally applied impulse is different timing than server's)

TODO:

* ART: make sure sprites are closer to their borders in the direction they are facing (so it doesnt look like they're too far from walls they run into)
* implement actions + animations for characters (attack, death, etc)
* optimize: do partial catch ups if an incremental update is missed by a client


* eventually: get cast engine working 
* eventually: figure out automatic NAT translation / sharing server invites
* eventually: plug-in content addition system
* eventually: multiple location instances, only stream updates to clients based on the location they're in (or try seamless?)
* eventually: template based random quest generation

Completed:
* make GameSim the CastWorldModel
* SERVER: create characters on map spawn point
* CLIENT: apply time deltas to server world updates on client before accepting them (reduce rubberbanding)
* CLIENT: make back button return to character select screen
* CLIENT: on character creation; go directly to gameplay with new character on create success
- FIXED: server ticking game time too slow
- FIXED: client side fps is low (Views were not being updated as often as Models)
* added updates per second counter to client in BattleView
- FIXED: SlidingWindowBuffer not respecting capacity limit
- FIXED: character names are not required to be unique
- ENG: refactor world update network code out of servergamecontroller into serverprotocol
* send incremental world updates
* un-delta world updates and use them
* send full world update to clients on connect
* generate and send world update deltas, next to full world updates (not using them yet)
* decouple world update broadcasts from game sim update ticks
- FIXED: deleting characters response client not updating list properly
- FIXED: graphics offset of players vs physics
* load data files (abilities, items, gfx/levels/tiledMap.json ) on server
* load tiledMap on server
* implement map physics on server (TiledMap)
* no-sql no-setup database (linvoDB3)
* user registration
